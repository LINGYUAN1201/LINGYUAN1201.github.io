% Generate and plot random data
rng(5,'v5normal');
mu = round((rand(3,2)-0.5)*19)+1;
sigma = round(rand(3,2)*40)/10+1;
X = [mvnrnd(mu(1,:), sigma(1,:), 200);
     mvnrnd(mu(2,:), sigma(2,:), 300);
     mvnrnd(mu(3,:), sigma(3,:), 400)];

figure;
scatter(X(:,1), X(:,2), 10, 'ro');

% Gaussian Mixture Clustering
options = statset('Display','off');
gm = gmdistribution.fit(X, 3, 'Options', options);

figure;
scatter(X(:,1), X(:,2), 10, 'ro');
hold on;
ezcontour(@(x,y) pdf(gm, [x,y]), [-15 15], [-15 10]);
hold off;

figure;
scatter(X(:,1), X(:,2), 10, 'ro');
hold on;
ezsurf(@(x,y) pdf(gm, [x,y]), [-15 15], [-15 10]);
hold off;
view(33,24);

cluster_assignments = cluster(gm, X);
P = posterior(gm, X);

figure;
plot_clusters_3d(X, P, cluster_assignments, 'Cluster');

figure;
plot_posterior_distribution(P, 'Cluster Membership Score');

% K-Means Clustering
[cidx3, cmeans3, ~, ~] = kmeans(X, 3, 'dist', 'sqEuclidean');

figure;
plot_silhouette(X, cidx3);

figure;
plot_clusters_2d(X, cidx3, cmeans3, 'Cluster');

% Hierarchical Clustering
eucD = pdist(X, 'euclidean');
clustTreeEuc = linkage(eucD, 'average');

figure;
dendrogram(clustTreeEuc, 'ColorThreshold', 'default');
title('Dendrogram');

% Find optimal clusters
max_clusters = 3;
cluster_assignments_hierarchical = cluster(clustTreeEuc, 'maxclust', max_clusters);

% Plot hierarchical clustering result
figure;
plot_clusters_2d(X, cluster_assignments_hierarchical, [], 'Hierarchical Clustering');

% Helper Functions

function plot_clusters_3d(X, P, cluster_assignments, title_str)
    figure;
    for i = 1:max(cluster_assignments)
        clust = (cluster_assignments == i);
        plot3(X(clust,1), X(clust,2), P(clust,i), '.', 'MarkerSize', 10);
        hold on;
    end
    hold off;
    grid on;
    legend(compose('%s %d', title_str, 1:max(cluster_assignments)), 'Location', 'NW');
    colormap(jet(80));
    view(-45, 20);
    ylabel(colorbar, 'Component Posterior Probability');
end

function plot_posterior_distribution(P, ylabel_str)
    figure;
    [~, order] = sort(P(:,1));
    plot(1:size(P,1), P(order,1), 'r-', 1:size(P,1), P(order,2), 'b-', 1:size(P,1), P(order,3), 'y-');
    legend(compose('%s %d Score', ylabel_str, 1:size(P,2)), 'location', 'NW');
    ylabel(ylabel_str);
    xlabel('Point Ranking');
end

function plot_silhouette(X, cidx)
    [silh, ~] = silhouette(X, cidx, 'sqeuclidean');
    figure;
    bar(silh);
    title('Silhouette Plot');
    xlabel('Silhouette Value');
    ylabel('Cluster');
end

function plot_clusters_2d(X, cidx, cmeans, title_str)
    figure;
    for i = 1:max(cidx)
        clust = (cidx == i);
        scatter(X(clust,1), X(clust,2), 'filled');
        hold on;
        
        % Check if centroids are provided before plotting
        if ~isempty(cmeans)
            plot(cmeans(i,1), cmeans(i,2), 'o', 'MarkerSize', 10, 'LineWidth', 2);
        end
    end
    hold off;
    title(title_str);
    legend(compose('%s %d', title_str, 1:max(cidx)), 'Location', 'NW');
end
